name: Build
on: push
jobs:
  build-in-docker:
    runs-on: ubuntu-24.04
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get the code
        uses: actions/checkout@v4

      - name: Build the wheel (during a Docker build)
        run: |
          docker buildx build --platform linux/arm64 --load .
          image=$(docker buildx build --platform linux/arm64 --load . --quiet)
          container=$(docker create $image)
          mkdir dist
          docker cp $container:/wd/dist/jacquev6_multiplatform_example-0.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_31_aarch64.whl dist

      - name: Upload the wheel to GitHub Actions artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-dist-3.13-linux-arm64
          path: dist

  # build-for-linux-x86:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix:
  #       python_version: ['3.8', '3.13']
  #   steps:
  #     - name: Install Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python_version }}
  #     - name: Install Python packages
  #       run: pip${{ matrix.python_version }} install auditwheel build twine
  #     - name: Install patchelf
  #       run: |
  #           cd /home/runner/work
  #           mkdir patchelf
  #           cd patchelf
  #           wget https://github.com/NixOS/patchelf/releases/download/0.18.0/patchelf-0.18.0-x86_64.tar.gz
  #           tar xf *.tar.gz
  #           sudo cp bin/patchelf /usr/local/bin

  #     - name: Get the code
  #       uses: actions/checkout@v4

  #     - name: Build the wheel
  #       run: python${{ matrix.python_version }} -m build --wheel --outdir local-dist
  #     - name: Make the wheel machine-independent
  #       run: auditwheel repair --plat manylinux_2_31_x86_64 --strip local-dist/*.whl --wheel-dir dist
  #     - name: Check the wheel
  #       run: twine check dist/*.whl

  #     - name: Upload the wheel to GitHub Actions artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheel-dist-${{ matrix.python_version }}-linux-x86
  #         path: dist

  # build-for-windows:
  #   runs-on: windows-2019
  #   strategy:
  #     matrix:
  #       python_version: ['3.8', '3.13']
  #   steps:
  #     - name: Install Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python_version }}
  #     - name: Install Python packages
  #       run: pip install build delvewheel twine

  #     - name: Get the code
  #       uses: actions/checkout@v4

  #     - name: Build the wheel
  #       run: python -m build --wheel --outdir local-dist
  #       env:
  #         LINCS_DEV_FORCE_NVCC: "true"
  #         LINCS_DEV_DEPENDENCIES: d:\lincs-deps
  #         LINCS_DEV_VC_VERSION: 142
  #     - name: Make the wheel machine-independent
  #       run: delvewheel repair --strip (get-item local-dist\*.whl) --wheel-dir dist --add-path d:\lincs-deps\lib
  #     - name: Check the wheel
  #       run: twine check (get-item dist\*.whl)

  #     - name: Upload the wheel to GitHub Actions artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheel-dist-${{ matrix.python_version }}-windows
  #         path: dist

  # build-for-macos:
  #   runs-on: macos-13
  #   strategy:
  #     matrix:
  #       python_version: ['3.8', '3.13']
  #   env:
  #     MACOSX_DEPLOYMENT_TARGET: 12.0
  #   steps:
  #     - name: Install Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python_version }}
  #     - name: Install Python packages
  #       run: pip3 install build delocate twine

  #     - name: Get the code
  #       uses: actions/checkout@v4

  #     - name: Build the wheel
  #       run: python3 -m build --wheel --outdir local-dist
  #     - name: Make the wheel machine-independent
  #       run: delocate-wheel --wheel-dir dist local-dist/*.whl
  #     - name: Check the wheel
  #       run: twine check dist/*.whl

  #     - name: Upload the wheel to GitHub Actions artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheel-dist-${{ matrix.python_version }}-macos
  #         path: dist

  # check:
  #   runs-on: ${{ matrix.os }}
  #   needs:
  #     - build-for-linux-x86
  #     - build-for-windows
  #     - build-for-macos
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-20.04
  #         - ubuntu-22.04
  #         - ubuntu-24.04
  #         # - windows-2019
  #         # - windows-2022
  #         # - macos-12
  #         # - macos-13
  #         # - macos-14
  #         # - macos-15
  #       python_version: ['3.8', '3.13']
  #       exclude:
  #         # Older Python versions don't build 'universal2' wheels, so they can't run on the M1 runner that run macOS 14 and 15
  #         - os: macos-14
  #           python_version: '3.8'
  #         - os: macos-15
  #           python_version: '3.8'
  #   steps:
  #     - name: Install Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python_version }}
  #     # DO NOT install any other dependencies, to test that the wheels are self-contained

  #     - name: Download the wheels from GitHub Actions artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: wheel-dist-${{ matrix.python_version }}-*
  #         merge-multiple: true

  #     - name: Install the wheel
  #       run: pip${{ matrix.python_version }} install --find-links . --pre jacquev6-multiplatform-example

  #     - name: Run
  #       run: python3 -c "import example"
